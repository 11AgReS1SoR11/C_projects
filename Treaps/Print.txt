void Take_elems(treaps* A, char** arr, int level, int left, int right) {
	if (A == NULL) return;
	arr[level][(right + left) / 2] = A->key;
	Take_elems(A->left, arr, level + 1, left, (right + left) / 2);
	Take_elems(A->right, arr, level + 1, (right + left) / 2, right);
}

void Take_elems2(treaps* A, int** arr, int level, int left, int right) {
	if (A == NULL) return;
	arr[level][(right + left) / 2] = A->priority;
	Take_elems2(A->left, arr, level + 1, left, (right + left) / 2);
	Take_elems2(A->right, arr, level + 1, (right + left) / 2, right);
}

char** dynamic_array_alloc_ch(int N, int M) {    // massive N*M
	char** A = (char**)malloc(N * sizeof(char*));
	if (A == NULL) return NULL;
	for (int i = 0; i < N; i++) {
		A[i] = (char*)calloc(M, sizeof(char));
		if (A[i] == NULL) return NULL;
		for (int j = 0; j < M; j++) A[i][j] = -1;
	}
	return A;
}

int** dynamic_array_alloc_in(int N, int M) {    // massive N*M
	int** A = (int**)malloc(N * sizeof(int*));
	if (A == NULL) return NULL;
	for (int i = 0; i < N; i++) {
		A[i] = (int*)calloc(M, sizeof(int));
		if (A[i] == NULL) return NULL;
		for (int j = 0; j < M; j++) A[i][j] = -1;
	}
	return A;
}

void Print_Tree(treaps* A, int n) {
	int hight = (int)log2(n + 2) + 1;
	int width = (int)pow(2, (int)log2(n + 2) + 1) - 1;
	int N = hight;
	int M = width;
	char** Matrix = dynamic_array_alloc_ch(N, M);
	Take_elems(A, Matrix, 0, 0, width);
	puts("Your Tree:");
	for (int i = 0; i < hight; i++) {
		for (int j = 0; j < width; j++)
			(Matrix[i][j] == -1) ? printf(" ") : printf("%c", Matrix[i][j]);
		puts("");
	}
	//F(Matrix, hight);
}

void Print_Tree_priority2(treaps* A, int n) {
	int hight = (int)log2(n + 2) + 1;
	int width = (int)pow(2, (int)log2(n + 2) + 1) - 1;
	int N = hight;
	int M = width;
	int** Matrix = dynamic_array_alloc_in(N, M);
	Take_elems2(A, Matrix, 0, 0, width);
	puts("Your Tree:");
	for (int i = 0; i < hight; i++) {
		for (int j = 0; j < width; j++)
			(Matrix[i][j] == -1) ? printf(" ") : printf("%d", Matrix[i][j]);
		puts("");
	}
	//F(Matrix, hight);
}